#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void char2bits(char c, unsigned char bits[8]) {
  for (int i = 0; i < 8; i ++) {
    bits[i] = (c >> (7 - i)) & 1;
  }
}

unsigned char bits2char(int* arr) {
  int ch = 0;

  for (int i = 0; i < 8; i++) {
    ch *= 2;
    ch += arr[i];
  }
  return (unsigned char) ch;
}

int main(int argc, char* argv[]){
  FILE *outfile, *infileP1, *infileP2, *infileD1, *infileP3, *infileD2, *infileD3, *infileD4;
  int size;
  char filename[50];
  char part0[50];
  char part1[50];
  char part2[50];
  char part3[50];
  char part4[50];
  char part5[50];
  char part6[50];
  
  while (!(c = getopt(argc, argv, "f:s:"))) {
    switch (c) {
    case 'f':
      strcpy(filename, optarg);
      break;
    case 's':
      size = optarg/4;
      break;
    }
  }
  
  infileP1 = fopen(strcat(strcpy(part0, filename), ".part0"), "r");
  infileP2 = fopen(strcat(strcpy(part1, filename), ".part1"), "r");
  infileD1 = fopen(strcat(strcpy(part2, filename), ".part2"), "r");
  infileP3 = fopen(strcat(strcpy(part3, filename), ".part3"), "r");
  infileD2 = fopen(strcat(strcpy(part4, filename), ".part4"), "r");
  infileD3 = fopen(strcat(strcpy(part5, filename), ".part5"), "r");
  infileD4 = fopen(strcat(strcpy(part6, filename), ".part6"), "r");
  outfile  = fopen(strcat(filename, ".2"), "w");

  for(int i = 0; i < size; i++){
    int P1[8];
    int P2[8];
    int D1[8];
    int P3[8];
    int D2[8];
    int D3[8];
    int D4[8];
    int hamming[7];
    int hamming2[7];
    int outputChar[8];
    unsigned char charP1[8];
    unsigned char charP2[8];
    unsigned char charD1[8];
    unsigned char charP3[8];
    unsigned char charD2[8];
    unsigned char charD3[8];
    unsigned char charD4[8];
    unsigned char P1get, P2get, D1get, P3get, D2get, D3get, D4get;

    P1get = fgetc(infileP1);
    P2get = fgetc(infileP2);
    D1get = fgetc(infileD1);
    P3get = fgetc(infileP3);
    D2get = fgetc(infileD2);
    D3get = fgetc(infileD3);
    D4get = fgetc(infileD4);

    char2bits(P1get, charP1);
    char2bits(P2get, charP2);
    char2bits(D1get, charD1);
    char2bits(P3get, charP3);
    char2bits(D2get, charD2);
    char2bits(D3get, charD3);
    char2bits(D4get, charD4);

    for(int j = 0; i < 8; j++){
      charP1[i] = (int)charP1[i];
      charP2[i] = (int)charP2[i];
      charD1[i] = (int)charD1[i];
      charP3[i] = (int)charP3[i];
      charD2[i] = (int)charD2[i];
      charD3[i] = (int)charD3[i];
      charD4[i] = (int)charD4[i];
    }

    for(int k = 0; k < 8; k+=2){
      int errorPlace1 = 0;
      boolean foundError1 = false;
      hamming[0] = P1[k];
      hamming[1] = P2[k];
      hamming[2] = D1[k];
      hamming[3] = P3[k];
      hamming[4] = D2[k];
      hamming[5] = D3[k];
      hamming[6] = D4[k];

      int errorPle2 = 0;
      boolean found
      hamming2[0] = P1[k+1];
      hamming2[1] = P2[k+1];
      hamming2[2] = D1[k+1];
      hamming2[3] = P3[k+1];
      hamming2[4] = D2[k+1];
      hamming2[5] = D3[k+1];
      hamming2[6] = D4[k+1];
      
      int P1 = (hamming[2] ^ hamming[4] ^ hamming[6]);
      int P2 = (hamming[2] ^ hamming[5] ^ hamming[6]);
      int P4 = (hamming[4] ^ hamming[5] ^ hamming[6]);
      

      int P11 = (hamming2[2] ^ hamming2[4] ^ hamming2[6]);
      int P12 = (hamming2[2] ^ hamming2[5] ^ hamming2[6]);
      int P14 = (hamming2[4] ^ hamming2[5] ^ hamming2[6]);

      
    }
    
  }

  fclose(outfile);
  fclose(infileP1);
  fclose(infileP2);
  fclose(infileD1);
  fclose(infileP3);
  fclose(infileD2);
  fclose(infileD3);
  fclose(infileD4);
  
  return 0;
}
